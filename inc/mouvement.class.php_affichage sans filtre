<?php
if (!defined('GLPI_ROOT')) {
   die("Sorry. You can't access this file directly");
}

class PluginMouvementsMouvement extends CommonGLPI {

   public static function getTypeName($nb = 0) {
      return __('Mouvements', 'Mouvements');
   }

   // Onglet visible sur les 4 types
   public function getTabNameForItem(CommonGLPI $item, $withtemplate = 0) {
      if (in_array($item->getType(), ['Computer','Printer','Monitor','Peripheral'], true)) {
         return self::getTypeName();
      }
      return '';
   }

   public static function displayTabContentForItem(CommonGLPI $item, $tabnum = 1, $withtemplate = 0) {
      self::renderItemTab($item);
      return true;
   }

   /**
    * Rendu de l’onglet + filtre type de mouvement
    */
   public static function renderItemTab(CommonGLPI $item) {
      global $DB, $CFG_GLPI; // IMPORTANT pour action AJAX

      $itemtype = $item->getType();
      $items_id = (int)$item->getID();

      // Filtre choisi (via liste déroulante)
      $valid = [
         ''          => [],                    // pas de filtre
         'Lieu'      => [3],
         'Statut'    => [31],
         'Utilisateur'=> [70],
         'Etat_equipement' => [76670]
      ];
      $filter = isset($_REQUEST['Mouvement_filter']) ? (string)$_REQUEST['Mouvement_filter'] : '';
      $ids    = $valid[$filter] ?? [];

      // Formulaire interne à l’onglet (recharge via common.tabs.php)
      echo "<form method='get' action='".Html::cleanInputText($CFG_GLPI['root_doc'])."/ajax/common.tabs.php' class='mb-2'>";
      echo Html::hidden('id',        ['value' => $items_id]);
      echo Html::hidden('itemtype',  ['value' => $itemtype]);
      echo Html::hidden('tab',       ['value' => __CLASS__.'$1']);

      echo "<label style='margin-right:8px;'>".__('Filtre mouvement','Mouvements')."</label>";
      echo Dropdown::showFromArray('Mouvement_filter', [
         '' => __('Tous','Mouvements'),
         'Lieu' => 'Lieu',
         'Statut' => 'Statut',
         'Utilisateur' => 'Utilisateur',
         'Etat_equipement' => 'Etat_equipement'
      ], ['value' => $filter, 'display' => false]);
      echo " <button class='vsubmit'>".__('Filtrer','Mouvements')."</button>";
      echo "</form>";

      // Construire et exécuter la requête
      $sql = self::buildInstantStateSQL($itemtype, $items_id, 200, $ids);
      $res = $DB->query($sql);

      if (!$res || $DB->numrows($res) === 0) {
         echo "<div class='m-2'>".__('Aucun mouvement trouvé','Mouvements')."</div>";
         return;
      }

      echo "<div class='spaced'>";
      echo "<table class='tab_cadre_fixehov'>";
      echo '<tr>'
         . '<th>'.__('Type mouvement','Mouvements').'</th>'
         . '<th>'.__('Date','Mouvements').'</th>'
         . '<th>'.__('Ancienne valeur','Mouvements').'</th>'
         . '<th>'.__('Nouvelle valeur','Mouvements').'</th>'
         . '<th>'.__('Utilisateur à cet instant','Mouvements').'</th>'
         . '<th>'.__('Lieu à cet instant','Mouvements').'</th>'
         . '<th>'.__('Statut à cet instant','Mouvements').'</th>'
         . '<th>'.__('État à cet instant','Mouvements').'</th>'
         . '<th>'.__('Modificateur','Mouvements').'</th>'
         . '</tr>';

      while ($row = $DB->fetchAssoc($res)) {
         echo '<tr>'
            . '<td>'.Toolbox::stripTags($row['type_mouvement']).'</td>'
            . '<td>'.Toolbox::stripTags($row['date_mod']).'</td>'
            . '<td>'.Toolbox::stripTags($row['old_value'] ?? '').'</td>'
            . '<td>'.Toolbox::stripTags($row['new_value'] ?? '').'</td>'
            . '<td>'.Toolbox::stripTags($row['user_at'] ?? '').'</td>'
            . '<td>'.Toolbox::stripTags($row['loc_at'] ?? '').'</td>'
            . '<td>'.Toolbox::stripTags($row['stat_at'] ?? '').'</td>'
            . '<td>'.Toolbox::stripTags($row['state_at'] ?? '').'</td>'
            . '<td>'.Toolbox::stripTags($row['user_name'] ?? '').'</td>'
            . '</tr>';
      }
      echo '</table></div>';
   }

   /**
    * SQL des mouvements pour un item + "état à cet instant".
    * @param array $filterIds liste d'id_search_option autorisés (vide = tous)
    */
   private static function buildInstantStateSQL(string $itemtype, int $items_id, int $limit = 200, array $filterIds = []) : string {
      global $DB;
	  
	  

      $itype = $DB->escape($itemtype);
      $ids   = array_map('intval', $filterIds);
      $whereSO = empty($ids) ? 'IN (3,31,70,76670)' : 'IN ('.implode(',', $ids).')';

      return "
      SELECT
        CASE l.id_search_option
          WHEN 3 THEN 'Lieu'
          WHEN 31 THEN 'Statut'
          WHEN 70 THEN 'Utilisateur'
          WHEN 76670 THEN 'Etat_equipement'
          ELSE 'Autre'
        END AS type_mouvement,
        l.date_mod,
        l.old_value,
        l.new_value,
        l.user_name,
        (SELECT l2.new_value FROM glpi_logs l2
          WHERE l2.itemtype = '$itype' AND l2.items_id = l.items_id AND l2.id_search_option = 70 AND l2.date_mod <= l.date_mod
          ORDER BY l2.date_mod DESC LIMIT 1) AS user_at,
        (SELECT l3.new_value FROM glpi_logs l3
          WHERE l3.itemtype = '$itype' AND l3.items_id = l.items_id AND l3.id_search_option = 3 AND l3.date_mod <= l.date_mod
          ORDER BY l3.date_mod DESC LIMIT 1) AS loc_at,
        (SELECT l4.new_value FROM glpi_logs l4
          WHERE l4.itemtype = '$itype' AND l4.items_id = l.items_id AND l4.id_search_option = 31 AND l4.date_mod <= l.date_mod
          ORDER BY l4.date_mod DESC LIMIT 1) AS stat_at,
        (SELECT l5.new_value FROM glpi_logs l5
          WHERE l5.itemtype = '$itype' AND l5.items_id = l.items_id AND l5.id_search_option = 76670 AND l5.date_mod <= l.date_mod
          ORDER BY l5.date_mod DESC LIMIT 1) AS state_at
      FROM glpi_logs l
      WHERE l.itemtype = '$itype' AND l.items_id = $items_id AND l.id_search_option $whereSO
      ORDER BY l.date_mod DESC
      LIMIT ".(int)$limit;
   }
}
